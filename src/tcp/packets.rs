use byteorder::{BigEndian, ByteOrder};

pub fn server_list_packet() -> [u8; 46] {
    let mut buffer: [u8; 46] = [0; 46];

    buffer[0] = 0xA8; // packet ID

    buffer[2] = 0x2E; // packet length

    buffer[3] = 0x00; // flags (unused, ServUO uses 0x5D

    BigEndian::write_u16(&mut buffer[4..6], 1); // server count

    BigEndian::write_u16(&mut buffer[6..8], 0); // server index

    buffer[8..16].copy_from_slice("My Shard".as_bytes()); // server name

    buffer[37] = 0x00; // server percent full

    // server timezone
    buffer[38] = 0x00;
    buffer[39] = 0x00;
    buffer[40] = 0x00;
    buffer[41] = 0x00;

    // server address
    buffer[42] = 0x7F;
    buffer[43] = 0x00;
    buffer[44] = 0x00;
    buffer[45] = 0x01;

    buffer
}

pub fn server_redirect_packet() -> [u8; 11] {
    let mut buffer: [u8; 11] = [0; 11];

    buffer[0] = 0x8C; // packet ID

    // server address
    buffer[1] = 0x7F; // 127;
    buffer[2] = 0x00; // 0;
    buffer[3] = 0x00; // 0;
    buffer[4] = 0x01; // 1;

    // server port
    buffer[5] = 0x0A; // 10;
    buffer[6] = 0x21; // 33;

    // encryption key
    buffer[7] = 0x43; // copied from a ServUO sample packet
    buffer[8] = 0x2F;
    buffer[9] = 0x3F;
    buffer[10] = 0xF0;

    buffer
}

pub fn features_packet() -> Vec<u8> {
    vec![
        0xB9, // packet ID
        0x00, 0xFF, 0x92, 0xDB, // flags
    ]
}

pub fn character_list_packet() -> Vec<u8> {
    let mut src = vec![];

    src.push(0xA9); // packet ID
    src.append(&mut vec![0x02, 0x08]); // packet size

    let character_count: u8 = 0x07;
    src.push(character_count);
    for _ in 0..character_count {
        src.append(&mut vec![0x00; 60]); // 7 empty character slots, 30 chars for name, 30 for password
    }

    src.push(0x01); // city count
    let mut city = vec![];
    city.push(0x00); // city index
    city.append(&mut format!("{:\0<32}", "Britain").as_bytes().into()); // city name
    city.append(&mut format!("{:\0<32}", "The Wayfarer's Inn").as_bytes().into()); // city tavern name

    let x: u32 = 1602;
    let y: u32 = 1591;
    let z: u32 = 20;
    city.append(&mut x.to_be_bytes().into());
    city.append(&mut y.to_be_bytes().into());
    city.append(&mut z.to_be_bytes().into());

    city.append(&mut vec![0x00, 0x00, 0x00, 0x01]); // city map ID (1)
    let city_description: u32 = 1075074;
    city.append(&mut city_description.to_be_bytes().into()); // city description code
    city.append(&mut vec![0x00, 0x00, 0x00, 0x00]); // padding
    src.append(&mut city);

    let flags: u32 = 4584; // [SixthCharacterSlot, ExpansionTOL, SeventhCharacterSlot]
    src.append(&mut flags.to_be_bytes().into());

    src.append(&mut vec![0xFF, 0xFF]); // unknown

    src
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_creates_the_correct_packet() {
        let packet = character_list_packet();

        let expected = vec![
            0xA9, 0x02, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x72, 0x69, 0x74, 0x61, 0x69, 0x6E, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x68, 0x65, 0x20,
            0x57, 0x61, 0x79, 0x66, 0x61, 0x72, 0x65, 0x72, 0x27, 0x73, 0x20, 0x49, 0x6E, 0x6E,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x06, 0x42, 0x00, 0x00, 0x06, 0x37, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x10, 0x67, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xE8,
            0xFF, 0xFF,
        ];

        assert_eq!(packet, expected);
    }
}
